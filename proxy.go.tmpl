//
//	This is the template that will wrap your original
//	Golang function into a lambda compatible one.
//

package main

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"net/url"
	"github.com/davecgh/go-spew/spew"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
)

func main() {
	server := route(Handler)
	lambda.Start(server)
}

//	Custom Proxy
//
//	Wraps echo server into Lambda Handler

func route(handler func(http.ResponseWriter, *http.Request)) func(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	return func(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
		spew.Dump(request)

		body := bytes.NewBufferString(request.Body)
		req, _ := http.NewRequest(request.HTTPMethod, request.Path, body)
		for k, v := range request.Headers {
			req.Header.Add(k, v)
		}

		q := make(url.Values)
		for key, value := range request.QueryStringParameters {
			q.Add(key, value)
		}
		req.URL.RawQuery = q.Encode()

		rec := httptest.NewRecorder()

		//	Handle the request
		handler(rec, req)

		res := rec.Result()
		responseHeaders := make(map[string]string)
		for key, value := range res.Header {
			responseHeaders[key] = ""
			if len(value) > 0 {
				responseHeaders[key] = value[0]
			}
		}

		responseBody, err := ioutil.ReadAll(res.Body)
		if err != nil {
			return events.APIGatewayProxyResponse{
				Body:       err.Error(),
				Headers:    responseHeaders,
				StatusCode: http.StatusInternalServerError,
			}, err
		}

		defer res.Body.Close()

		responseHeaders["Access-Control-Allow-Origin"] = "*"
		responseHeaders["Access-Control-Allow-Headers"] = "origin,Accept,Authorization,Content-Type"

		return events.APIGatewayProxyResponse{
			Body:       string(responseBody),
			Headers:    responseHeaders,
			StatusCode: res.StatusCode,
		}, nil
	}
}
